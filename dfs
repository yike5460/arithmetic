/*Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

class Solution {
public:
    vector<vector<int>> res;
	void dfs(int n, int k, int cnt, int st, vector<int>&tmp){
		if (cnt==k) {
			res.push_back(tmp);
			return;
		}
		for (int i = st; i<=n; i++){
			tmp[cnt] = i;
			dfs(n,k,cnt+1,i+1,tmp);
		}
	}
    vector<vector<int>> combine(int n, int k) {
		vector <int> tmp(k,0);
		dfs(n,k,0,1,tmp);
		return res;
    }
};
/*
n=4,k=2,cnt=0,start=1,tmp={}
first flatten loop
dfs(4,2,0+1,1+1,{1}); 
dfs(4,2,0+1,2+1,{2}); 
dfs(4,2,0+1,3+1,{3}); 
dfs(4,2,0+1,4+1,{4});

second flatten loop
dfs(4,2,1+1,2+1,{1,2}); dfs(4,2,1+1,3+1,{1,3}); dfs(4,2,1+1,4+1,{1,4})
dfs(4,2,1+1,3+1,{2,3}); dfs(4,2,1+1,4+1,{2,4});
dfs(4,2,1+1,4+1,{3,4});
not execute

third loop
dfs(4,2,2+1,)
break since cnt=k
*/
