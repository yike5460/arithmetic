/*Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        /*
        tried but failed p[i] = max(f[i-1]+prices[i]-prices[i-1], p[i-1]) wrong idea?
        use p[i] = max(prices[i]-min_price, p[i-1])
        */
        int cur_max = 0;
        int pre_max = 0; 
        int min_price = INT32_MAX;
        for (int i=0; i<prices.size(); i++) {
            if(prices[i]<=min_price) {min_price = prices[i];}
            cur_max = max(prices[i]-min_price, pre_max);
            pre_max = cur_max;
        }
        return cur_max;
    }
};
