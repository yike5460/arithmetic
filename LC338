Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
Hint:

You should make use of what you have produced already.
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.
Or does the odd/even status of the number help you in calculating the number of 1s?

class Solution {
public:
    /*count_odd(n)=count_even(n-1)+1; count_even(n)=count_odd(n&n-1)+1
    0000 0 *
    0001 1 
    0010 1 *
    0011 2
    0100 1 *
    0101 2
    0110 2 *
    0111 3
    1000 1 *
    1001 2
    1010 2 *
    1011 3 
    1100 2 *
    1101 3
    1110 3 *
    1111 4
   10000 1 *
    */ 
    vector<int> countBits(int num) {
        vector<int> ret(num+1, 0);
        for (int i=1; i<=num; i++) {
            ret[i]=ret[i&(i-1)]+1;
        }
        return ret;
    }
};
