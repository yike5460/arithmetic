#ifndef LIST_H
#define LIST_H

#include <stdlib.h>

typedef struct ListElmt_
{
  void *data;
  struct ListElmt_ *next;
} ListElmt;

typedef struct List_
{
  int size;
  int (*match)(const void* key1, const void* key2);
  void (*destroy)(void *data);
  ListElmt *head;
  ListElmt *tail;
} List;

void list_init(List *list, void (*destroy)(void *data));
void list_destroy(List *list);
int list_ins_next(List *list, ListElmt *element, const void *data);
int list_rem_next(List *list, ListElmt *element, void **data);
#define list_size(list) ((list)->size);

#define list_head(list) ((list)->head)
#define list_tail(list) ((list)->tail)
#define list_is_head(list, element) ((element)==(list)->head ? 1: 0)
#define list_is_tail(element) ((element)->next==NULL ? 1: 0)
#define list_data(element) ((element)->data)
#define list_next(element) ((element)->next)

void list_init(List *list, void (*destroy)(void *data)) {
  list->size=0;
  list->destroy=destroy;
  list->head=list->tail=NULL;
  return;
}

void list_destroy(List *list) {
  void *data;
  while(list->size) {
    if ((list_rem_next(list, NULL, (void **)&data) == 0) && (list->destroy!=NULL)) {
      list->destroy(data);
    }
  }
  memset(list, 0, sizeof(list));
  return;
}

int list_ins_next(List *list, ListElmt *element, const void *data) {
  ListElmt *new_element;
  if((new_element=(ListElmt*)malloc(sizeof(ListElmt)))==NULL) return (-1);
  new_element->data=data;
  /*insert at head*/
  if (NULL==element) {
    if(list->size) {list->tail=new_element;}
    new_element->next=list->head;
    list->head=new_element;
  } else {
    if(NUll==element->next) {list->tail=new_element;}
    new_element->next=element->next;
    element->next=new_element;
  }
  list->size++;
  return (0);
}

int list_rem_next(List *list, ListElmt *element, const void *data) {

}
