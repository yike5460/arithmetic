Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x < 10n.

Example:
Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x < 100, excluding [11,22,33,44,55,66,77,88,99])

/*dfs*/
class Solution {
public:
    int count=1;
    void dfs(int n, int start, bool[] bitmap) {
        if (!n) return;
        for (int i=0; i<=9; i++) {
            if (bitmap[i]==false) {
                count++;
                bitmap[i]=true;
                dfs(n-1, start+1, bitmap);
                bitmap[i]=false;
            }
        }
    }
    int countNumbersWithUniqueDigits(int n) {
        bool bitmap[]= new bool[10];
        bitmap = {false, true};
        dfs(n, 0, bitmap);
        return count;
    }
};

/*speficial way*/
class Solution {
public:
    int countNumbersWithUniqueDigits(int n) {
        if (n<1) return 1;
        // For single digit, we have 10 numbers with unique digits
        int totalUnique = 10;
        //After first digit, the choice for first digit is only 9 digits,
        int prevMultiplier = 9;
        for (int i = 1; i < n; i++)
        {
            prevMultiplier *= (10-i);
            totalUnique += prevMultiplier;
        }
        return totalUnique;
    }
};
